@model BassWebV3.ViewModels.CaseNoteFiles
@using Kendo.Mvc.UI;
@Html.HiddenFor(m => m.EpisodeID, new { @id = "hdCFEpisodeID" })
@Html.HiddenFor(m => m.CanEditNote, new { @id = "hdCanEditNote" })
<style>
    .k-grid .k-state-selected { background: lightgray; }
    
    .k-grid tbody .k-button {
        min-width: 0px;
        width: 16px;
        min-height: 13px;
        height: 13px;
    }
    .k-grid td {
        line-height: 1em!important ;
        font-size:14px!important;
    }

   
    .k-grid-content .k-button::before {
        text-indent: 0;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
        background-color: transparent;
    }

    .k-edit-form-container{
        width:100%!important;
    }
    .k-edit-form-container .k-edit-buttons {
        padding: 0px;
    }

    .k-popup-edit-form k-window-content k-content {
        width:100%!important;
        height:100%!important;
        padding:0px!important;
    }
    a.k-grid-update {
        background-color: #2a6496 !important;
        color: white;
    }

        a.k-grid-update:hover {
            background-color: #cbd0aa !important;
            color: Highlight;
        }
    .k-edit-form-container {
        width: 680px;
        height: 300px;
        padding: 0px;
    }

    .k-window-title {
        font-size: 18px;
        font-weight: bold;
        line-height: 1.5em;
        background-color:cornflowerblue;
        height:30px;
    }
    
    .no-data {
        background-color: yellow;
    }
</style>

<script>
           function CheckPopupData(e) {
               e.model.CaseNoteTypeReasonID = $("#CaseNoteTypeReasonID").data("kendoDropDownList").value();
               if (e.model.Text != null && e.model.Text.length > 0) {
                   e.model.Text = (e.model.Text.split('<').join("&lt;")).split('>').join("&gt;");
               }
          }
           function insertPopupCaption(e) {
               if (e.model.isNew()) {
                   e.container.kendoWindow("title", "Add New Case Note");
               }
           }
           function gridDataBound(e) {
               var grid = e.sender;
               if (grid.dataSource.total() == 0) {
                   var colCount = grid.columns.length;
                   $("#divCasenoteText").hide();
                   $("#divCasenoteReason").hide();
                   $("#txtComment").val("");
                   $(e.sender.wrapper)
                       .find('tbody')
                       .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data" style="text-align:center;">No Case Note Yet...</td></tr>');
               }
               else {
                   if (grid.select().length == 0) {
                       $("#divCasenoteText").hide();
                       $("#divCasenoteReason").hide();
                       $("#txtComment").val("");
                   }
               }

               if ($("#hdCanEditNote").val() !== "True") { // the condition against which you want to show/hide the toolbar
                   this.element.find(".k-grid-toolbar").hide(); // hides the entire toolbar
                   this.element.find(".k-grid-add").hide(); // hides j
               }
               else
               {
                   this.element.find(".k-grid-toolbar").show(); // hides the entire toolbar
                   this.element.find(".k-grid-add").show(); // hides j
               }
               grid.tbody.find("tr[role='row']").each(function () {
                   var model = grid.dataItem(this);
                   if (model.Text != null && model.Text.length > 0) {
                       model.Text = (model.Text.split('&lt;').join("<")).split('&gt;').join(">");
                   }
               });
           };
           $("#gridCaseNote tbody").on("click", "tr", function (e) {
               if (e.target.cellIndex == 8 || e.target.classList.contains("k-grid-edit") || e.target.classList.contains("k-grid-delete")) {
                   return;
               }
                   
               var rowElement = this;
               var row = $(rowElement);
               var grid = $("#gridCaseNote").getKendoGrid();
               if (row.hasClass("k-state-selected")) {
                   var selected = grid.select();
                   selected = $.grep(selected,function(x){
                       var itemToRemove = grid.dataItem(row);
                       var currentItem = grid.dataItem(x);
                       return itemToRemove.OrderID != currentItem.OrderID
                   })
                   grid.clearSelection();
                   grid.select(selected);
                   e.stopPropagation();
               }else{
                   grid.select(row)
                   e.stopPropagation();
               }
           });
           function onRowSelected(e) {
               if (this.select().length == 0 || this.dataSource._data.length == 0)
               {
                   $("#divCasenoteText").hide();
                   $("#divCasenoteReason").hide()
                   $("#displayReason").val("");
                   $("#txtComment").val("");
                   return;
               }
              
               var retVal = "";
               if (this.dataItem(this.select()).CaseNoteTypeReasonID != null) {
                   retVal = "Reason: " + this.dataItem(this.select()).CaseNoteTypeReason;
                   $("#displayReason").val(retVal)                 
                   $("#divCasenoteReason").show();
               }
               else {
                   $("#divCasenoteReason").hide()
                   $("#displayReason").val("");
               }
               $("#divCasenoteText").show();
               $("#txtComment").val(this.dataItem(this.select()).Text);
           }
           function typeFilter(element) {
               element.kendoDropDownList({
                   dataSource: {
                       transport: {
                           read:{
                               url: "@Url.Action("FilterCaseNoteType_read", "EditOffender")",
                               data: { EpisodeID: $("#hdCFEpisodeID").val() }
                       },
                   }
               },
                   optionLabel: "--Select Type--"
           });
           }
           function RefreshGrid(e)
           {
               if (e.type == "create" || e.type == "update")
               {
                   var grid = $("#gridCaseNote").data("kendoGrid");
                   grid.dataSource.read({ EpisodeID: $("#hdCFEpisodeID").val() });
               }
           }
           function getEditTooltipContent(e) {
              var row = e.target.closest("tr");
               var grid = $("#gridCaseNote").getKendoGrid();
               return "Edit ";
           }
           function getDeleteTooltipContent(e) {
               var row = e.target.closest("tr");
               var grid = $("#gridCaseNote").getKendoGrid();
               return "Delete ";
           }
           function NoteCanEdit(dataItem) {
               return (dataItem.NoteCanEdit && dataItem.ActionStatus != 10);
           }
           function GridDisabled(e) {
               $("#CaseNoteTypeReasonID_validationMessage").hide();
               var ddltype = $("#CaseNoteTypeID").data("kendoDropDownList");
               var ddlreason = $("#CaseNoteTypeReasonID").data("kendoDropDownList");
               if ($("#CaseNoteTypeID").val() == "5" || $("#CaseNoteTypeID").val() == "8" || $("#CaseNoteTypeID").val() == "10") {
                   if (ddlreason.value().length ==0 )
                      ddlreason.select(1);
               }
               if ($("#CaseNoteTypeID").val() == "1") {
                   if (ddlreason.value().length == 0)
                       ddlreason.select(3);
               }
               if (ddlreason.dataSource._data.length == 0)
                   ddlreason.enable(false);
               else
                   ddlreason.enable(true);
           }
           function StopProcess(e) {
               if (!e.model.isNew() && !e.model.NoteCanEdit) {
                   e.preventDefault();
               }
           }
           function GetCurrentEpisodeID() {
               return { EpisodeID: $("#hdCFEpisodeID").val() };
           }
</script>

@(Html.Kendo().Tooltip()
                    .For("#gridCaseNote")
                    .Filter(".k-grid-edit")
                    .ContentHandler("getEditTooltipContent")
)

@(Html.Kendo().Tooltip()
                        .For("#gridCaseNote")
                        .Filter(".k-grid-delete")
                        .ContentHandler("getDeleteTooltipContent")
)

@{ 
    var canedit = Model.CanEditNote ? "" : "none";
}

    <div class="divOffenderPart1tr" style="height:150%;">
    @(Html.Kendo().Grid<BassIdentityManagement.Entities.CaseNoteData>()
    .Name("gridCaseNote")
    .HtmlAttributes(new { style = "width:98%!important;font-size:14px;padding:0px;" })
    .Scrollable(s => s.Enabled(true))
    .Selectable(s => s.Mode(GridSelectionMode.Single))
    .PersistSelection(true)
        .Events(e => { e.DataBound("gridDataBound"); e.Change("onRowSelected"); e.Edit("insertPopupCaption"); e.Save("CheckPopupData"); e.BeforeEdit("StopProcess"); })
        .ToolBar(toolbar => { toolbar.Create().Text("Add New Note").HtmlAttributes(new { style = "display:" + @canedit }); })
        //.ToolBar(toolbar => toolbar.Excel().Text("Export To Excel")).Excel(exl => exl.FileName("CaseNote.xlsx").Filterable(true).AllPages(true))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_NewNote").Window(w => w.Title("Edit Case Note").Width(750).Height(370)))
        .Sortable(sortable => sortable.AllowUnsort(true))
        .Scrollable(sc => sc.Enabled(true).Height("13vh"))
        .Filterable(filterable => filterable
        .Extra(false)
        .Operators(operators =>
        {
            operators
            .ForString(str => str.Clear()
            .StartsWith("Starts with")
            .IsEqualTo("Is equal to")
            );
        })
       )
        .Navigatable()
        .Columns(columns =>
        {
            columns.Bound(o => o.CaseNoteID).Hidden();
            columns.Bound(o => o.UserID).Hidden();
            columns.Bound(o => o.CaseNoteTypeID).Hidden();
            columns.Bound(o => o.CaseNoteTraceID).Hidden();
            columns.Bound(o => o.CaseNoteTypeReasonID).Hidden();
            columns.Bound(f => f.EventDate).Title("Date").Format("{0:MM/dd/yyyy}").Width(60);
            columns.Bound(f => f.CaseNoteType).Title("Type").Width(90).Filterable(fs => fs.UI("typeFilter"))
                                              .HtmlAttributes(new { style = "white-space: normal;" });
            columns.Bound(f => f.CreatedBy).Title("Creator").Width(70).HtmlAttributes(new { style = "white-space: normal;" }); ;
            columns.Command(command => { command.Edit().Text(" ").Visible("NoteCanEdit"); command.Destroy().Text(" ").Visible("NoteCanEdit"); }).Width(50);
        })
    .DataSource(ds => ds.Ajax()
    .Batch(true)
    .ServerOperation(false)
    .Events(ed => { ed.RequestEnd("RefreshGrid"); })
    .Model(m =>
    {
        m.Id(f => f.CaseNoteID);
        m.Field(f => f.CaseNoteTraceID).Editable(false);
        m.Field(f => f.CaseNoteTypeID);
        m.Field(f => f.CaseNoteTypeReasonID);
        m.Field(f => f.Text).DefaultValue("");
        m.Field(f => f.EventDate).DefaultValue(DateTime.Now);
    })
    .Read(r => r.Action("CaseNoteRead", "EditOffender", new { EpisodeID = Model.EpisodeID }))
    .Create(c => c.Action("CaseNoteCreate", "EditOffender", new { EpisodeID = Model.EpisodeID }))
    .Destroy(d => d.Action("CaseNoteDelete", "EditOffender", new { EpisodeID = Model.EpisodeID }))
    .Update(u => u.Action("CaseNoteUpdate", "EditOffender", new { EpisodeID = Model.EpisodeID }))))
</div>
    <span style="width:100%;height:5px;"></span>
    <div class="divOffenderPart1tr" id="divCasenoteReason" style="justify-content:flex-start;">
        @Html.TextBox("message", "", new { @id = "displayReason", @readonly = "readonly", style = "width:97%;color:#ff9900;background-color:white;font-weight: bold;" })
    </div>
    <div class="divOffenderPart1tr" id="divCasenoteText">
        @Html.TextArea("textarea", "", new { @id = "txtComment", @class = "textareaforcasemanngement", placeholder = "Note ...", spellcheck = "true", style = "width:97%;max-height:120px!important;background-color:white;font-size:15px", @rows = "6", @readonly = "readonly" })
    </div>
 
