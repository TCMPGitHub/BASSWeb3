@model BassWebV3.ViewModels.DocUpload
@using Kendo.Mvc.UI;

<style>
    .k-grid-header th.k-header > .k-link {
        min-height: 10px;
        line-height: 10px;
    }

    .widget div {
        padding: 1px;
        min-height: 20px;
    }

    /*#gridupload > .k-grid-content {
        height: 110px !important;
    }*/

    .k-grid tbody .k-button {
        min-width: 0px;
        width: 16px;
        min-height: 15px;
        height: 15px;
    }

    .k-grid td {
        line-height: 0.8em;
    }

    .k-grid-content .k-button {
        width: 14px;
        height: 12px;
        border: none;
        min-width: 0 !important;
        border-radius: 0;
        display: inline-block;
        font: normal normal normal 10px/1 FontAwesome;
        font-size: inherit;
        text-rendering: auto;
        -webkit-font-smoothing: antialiased;
        /*-moz-osx-font-smoothing: grayscale;*/
        /*text-indent: -10000px;*/
        position: relative;
    }

        .k-grid-content .k-button::before {
            text-indent: 0;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        }
    .k-header k-grid-toolbar k-grid-top {
        height: 18px !important;
    }
</style>

<script>

           function insertPopupCaption(e) {
               if (e.model.isNew()) {
                   $('.k-window-title').text("Add New Case Note");
               }
           }
           function fileDataBound(e) {
               var grid = e.sender;
               if (grid.dataSource.total() == 0) {
                   var colCount = grid.columns.length;
                   $(e.sender.wrapper)
                       .find('tbody')
                       .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data" style="text-align:center;">No File Uploaded Yet...</td></tr>');
               }
           };
           function getDeleteTooltipContent(e) {
               var row = e.target.closest("tr");
               var grid = $("#gridFileUpload").getKendoGrid();
               return "Delete ";
           }
           function CloseFileList(e){
               e.preventDefault();
               var upload = $("#files").data("kendoUpload");
               upload.removeAllFiles();
           }
</script>
<script type="text/javascript">
    function onUploadSuccess() {
        // Force the rebinding of the Grid on successful upload
        $("#gridFileUpload").data("kendoGrid").dataSource.read();
    }
          $("#clearAll").on('click', function (e) {
              e.preventDefault();

              var upload = $("#files").data("kendoUpload");
              upload.clearAllFiles();
          })
</script>

@(Html.Kendo().Tooltip()
                        .For("#gridFileUpload")
                        .Filter(".k-grid-delete")
                        .ContentHandler("getDeleteTooltipContent")
)

<div class="divOffenderPart1tr">
   <div class="divOffenderPart1tb" style="width:99.5%">
            @(Html.Kendo().Upload()
            .Name("files")
            .Async(a => a
                .Save("Chunk_Upload_Save", "EditOffender", new { EpisodeId = Model.EpisodeId })
                .AutoUpload(true)
                .ChunkSize(1048576)
            ).HtmlAttributes(new { style = "height:20px; float:left;width:97%;font-size:15px;" })
           .Events(e => { e.Success("onUploadSuccess"); })
           .Messages(m => m.Select("Select File..."))
           .Multiple(false)
           .Validation(validation =>
           {
               validation.MaxFileSize(20000000);
               validation.AllowedExtensions(new string[] { ".pdf" });
           }).ShowFileList(false).Enable(!Model.ViewOnly)
           )
        </div>
</div>
@(Html.Kendo().Grid<BassIdentityManagement.Entities.UploadedFiles>()
      .Name("gridFileUpload")
      .Events(e => e.DataBound("fileDataBound"))
      .Columns(columns =>
      {
          columns.Bound(f => f.ID).Hidden();
          columns.Bound(f => f.UploadDate).Format("{0:MM/dd/yyyy}").Title("Upload Date").Width(90);
          columns.Bound(f => f.FileName).ClientTemplate("<a href='" + Url.Action("Download", "EditOffender") + "/#= ID#'>#= FileName #</a>")
                      .Title("File Name").HtmlAttributes(new { style = "white-space: normal;" });
          columns.Bound(f => f.UploadBy).Title("Upload By").Width(80);
          columns.Command(command => command.Destroy().Text(" ")).Visible(!Model.ViewOnly);
      })
       .Sortable(sortable => sortable.AllowUnsort(true))
        .Scrollable(a => a.Enabled(true))
        .Navigatable()
        .HtmlAttributes(new { style = "height:180px;padding:0px;width:99.5%;" })
        .DataSource(dataSource => dataSource
          .Ajax()
          .Model(m => m.Id(f => f.ID))
          .Read(read => read.Action("FilesRead", "EditOffender", new { EpisodeId = Model.EpisodeId }))
          .Destroy(update => update.Action("FilesDestroy", "EditOffender"))
      )
)




